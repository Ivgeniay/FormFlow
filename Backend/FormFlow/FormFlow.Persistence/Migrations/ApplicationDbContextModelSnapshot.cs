// <auto-generated />
using System;
using FormFlow.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FormFlow.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FormFlow.Domain.Models.General.ApiToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TokenHash")
                        .IsUnique()
                        .HasDatabaseName("IX_ApiTokens_TokenHash");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_ApiTokens_UserId");

                    b.HasIndex("UserId", "IsActive")
                        .HasDatabaseName("IX_ApiTokens_UserId_IsActive");

                    b.ToTable("ApiTokens", (string)null);
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.ColorTheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("color_theme_id");

                    b.Property<string>("ColorVariables")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("color_variables");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CssClass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("css_class");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CssClass")
                        .IsUnique()
                        .HasDatabaseName("idx_ColorThemes_CssClass");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("idx_ColorThemes_Name");

                    b.ToTable("ColorThemes", (string)null);
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("comment_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("template_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId")
                        .HasDatabaseName("idx_comments_template");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.EmailPasswordAuth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("email_password_auth_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiresAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("refresh_token_expires_at");

                    b.Property<DateTime?>("RefreshTokenRevokedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("refresh_token_revoked_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("idx_email_password_auths_email");

                    b.HasIndex("RefreshToken")
                        .HasDatabaseName("idx_email_password_auths_refresh_token");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("idx_email_password_auths_user");

                    b.ToTable("EmailPasswordAuths", (string)null);
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("form_id");

                    b.Property<string>("AnswersData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("answers_data");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("submitted_at");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("template_id");

                    b.Property<int>("TemplateVersion")
                        .HasColumnType("int")
                        .HasColumnName("template_version");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId")
                        .HasDatabaseName("idx_forms_template");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_forms_user");

                    b.HasIndex("TemplateId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("idx_forms_template_user");

                    b.ToTable("Forms", (string)null);
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.FormSubscribe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("form_subscribe_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("template_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId")
                        .HasDatabaseName("idx_form_subscribes_template");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_form_subscribes_user");

                    b.HasIndex("UserId", "TemplateId")
                        .IsUnique()
                        .HasDatabaseName("idx_form_subscribes_user_template");

                    b.ToTable("FormSubscribes", (string)null);
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.GoogleAuth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("google_auth_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("google_id");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("picture_url");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiresAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("refresh_token_expires_at");

                    b.Property<DateTime?>("RefreshTokenRevokedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("refresh_token_revoked_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("idx_google_auths_email");

                    b.HasIndex("GoogleId")
                        .IsUnique()
                        .HasDatabaseName("idx_google_auths_google_id");

                    b.HasIndex("RefreshToken")
                        .HasDatabaseName("idx_google_auths_refresh_token");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("idx_google_auths_user");

                    b.ToTable("GoogleAuths", (string)null);
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("language_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("IconURL")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("icon_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("region");

                    b.Property<string>("ShortCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("short_code");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("idx_Languages_Code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("idx_Languages_Name");

                    b.ToTable("Languages", (string)null);
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("like_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("template_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId")
                        .HasDatabaseName("idx_likes_template");

                    b.HasIndex("UserId");

                    b.HasIndex("TemplateId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("idx_likes_template_user");

                    b.ToTable("Likes", (string)null);
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("question_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("data");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_required");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<bool>("ShowInResults")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("show_in_results");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("template_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId")
                        .HasDatabaseName("idx_questions_template");

                    b.HasIndex("TemplateId", "Order")
                        .HasDatabaseName("idx_questions_template_order");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tag_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("UsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("usage_count");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("idx_tags_name");

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("template_id");

                    b.Property<int>("AccessType")
                        .HasColumnType("int")
                        .HasColumnName("access_type");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("author_id");

                    b.Property<Guid?>("BaseTemplateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("base_template_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_published");

                    b.Property<Guid?>("PreviousVersionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("previous_version_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("topic_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("idx_templates_author");

                    b.HasIndex("BaseTemplateId")
                        .HasDatabaseName("idx_templates_base_template");

                    b.HasIndex("TopicId");

                    b.HasIndex("BaseTemplateId", "Version")
                        .IsUnique()
                        .HasDatabaseName("idx_templates_base_version")
                        .HasFilter("[base_template_id] IS NOT NULL");

                    b.ToTable("Templates", (string)null);
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.TemplateAllowedUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("template_allowed_user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("template_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId")
                        .HasDatabaseName("idx_template_allowed_users_template");

                    b.HasIndex("UserId");

                    b.HasIndex("TemplateId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("idx_template_allowed_users_template_user");

                    b.ToTable("TemplateAllowedUsers", (string)null);
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.TemplateTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("template_tag_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tag_id");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("template_id");

                    b.HasKey("Id");

                    b.HasIndex("TagId")
                        .HasDatabaseName("idx_template_tags_tag");

                    b.HasIndex("TemplateId", "TagId")
                        .IsUnique()
                        .HasDatabaseName("idx_template_tags_template_tag");

                    b.ToTable("TemplateTags", (string)null);
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("topic_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("topic_name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("idx_topic_name");

                    b.ToTable("Topics", (string)null);
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("idx_users_username");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.UserContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_contact_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_primary");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("contact_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("contact_value");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_user_contacts_user");

                    b.HasIndex("UserId", "Type", "IsPrimary")
                        .HasDatabaseName("idx_user_contacts_user_type_primary");

                    b.ToTable("UserContacts", (string)null);
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.UserSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_settings_id");

                    b.Property<Guid>("ColorThemeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("color_theme_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("language_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ColorThemeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("idx_UserSettings_user_Id");

                    b.ToTable("UserSettings", (string)null);
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.ApiToken", b =>
                {
                    b.HasOne("FormFlow.Domain.Models.General.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.Comment", b =>
                {
                    b.HasOne("FormFlow.Domain.Models.General.Template", "Template")
                        .WithMany("Comments")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormFlow.Domain.Models.General.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.EmailPasswordAuth", b =>
                {
                    b.HasOne("FormFlow.Domain.Models.General.User", "User")
                        .WithOne("EmailAuth")
                        .HasForeignKey("FormFlow.Domain.Models.General.EmailPasswordAuth", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.Form", b =>
                {
                    b.HasOne("FormFlow.Domain.Models.General.Template", "Template")
                        .WithMany("Forms")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FormFlow.Domain.Models.General.User", "User")
                        .WithMany("Forms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.FormSubscribe", b =>
                {
                    b.HasOne("FormFlow.Domain.Models.General.Template", null)
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormFlow.Domain.Models.General.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.GoogleAuth", b =>
                {
                    b.HasOne("FormFlow.Domain.Models.General.User", "User")
                        .WithOne("GoogleAuth")
                        .HasForeignKey("FormFlow.Domain.Models.General.GoogleAuth", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.Like", b =>
                {
                    b.HasOne("FormFlow.Domain.Models.General.Template", "Template")
                        .WithMany("Likes")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormFlow.Domain.Models.General.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.Question", b =>
                {
                    b.HasOne("FormFlow.Domain.Models.General.Template", "Template")
                        .WithMany("Questions")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.Template", b =>
                {
                    b.HasOne("FormFlow.Domain.Models.General.User", "Author")
                        .WithMany("Templates")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FormFlow.Domain.Models.General.Topic", "Topic")
                        .WithMany("Templates")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.TemplateAllowedUser", b =>
                {
                    b.HasOne("FormFlow.Domain.Models.General.Template", "Template")
                        .WithMany("AllowedUsers")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormFlow.Domain.Models.General.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.TemplateTag", b =>
                {
                    b.HasOne("FormFlow.Domain.Models.General.Tag", "Tag")
                        .WithMany("Templates")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormFlow.Domain.Models.General.Template", "Template")
                        .WithMany("Tags")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.UserContact", b =>
                {
                    b.HasOne("FormFlow.Domain.Models.General.User", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.UserSettings", b =>
                {
                    b.HasOne("FormFlow.Domain.Models.General.ColorTheme", "ColorTheme")
                        .WithMany()
                        .HasForeignKey("ColorThemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FormFlow.Domain.Models.General.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FormFlow.Domain.Models.General.User", "User")
                        .WithOne()
                        .HasForeignKey("FormFlow.Domain.Models.General.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ColorTheme");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.Tag", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.Template", b =>
                {
                    b.Navigation("AllowedUsers");

                    b.Navigation("Comments");

                    b.Navigation("Forms");

                    b.Navigation("Likes");

                    b.Navigation("Questions");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.Topic", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("FormFlow.Domain.Models.General.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Contacts");

                    b.Navigation("EmailAuth");

                    b.Navigation("Forms");

                    b.Navigation("GoogleAuth");

                    b.Navigation("Likes");

                    b.Navigation("Templates");
                });
#pragma warning restore 612, 618
        }
    }
}
